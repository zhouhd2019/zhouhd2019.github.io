---
layout:     post
title:      "GameAIPro Chapter08"
subtitle:   "Simulating Behavior Trees"
date:       2019-09-24 17:42:00
author:     "zhouhd"
header-img: "img/about-bg.jpg"
catalog: true
tags:
    - GameAI
    - GameAIPro
    - GameProgramming
---

## 行为树和Planner
   - 行为树能够很好地表示一个实体能做的事情，允许设计者组合基本动作来实现更高级别的行为。行为树能够很好地表示AI能做的事情，容易理解，并且便于配置。
   - 但行为树并不能很好地决定实体应该做什么，它需要知道全局状态，包括其它实体AI或者游戏系统是怎么实现的。它也要知道它本身的行为所带来的结果，会如何影响全局状态等等。这样的话依赖关系可能会非常复杂，某些系统改了，行为树也要跟着修改
   - planner用来创建一系列基本行为来完成某些目标，这一系列行为被称为计划。planner包含了一个全局状态模型，AI能够完成的所有基本行为，以及一个目标启发式方法。全局状态模型包含了启发式方法所需要的所有全局信息，例如可攻击的敌人和他们的生命值。planner知道每种基本行为会如何影响全局状态。
   - 目标启发式方法给计划评分，表示这个计划离达成目标还有多远。例如，一个战斗用的方法会给那些击伤敌人的计划更高评分。如果AI实体离敌人很近，一个高评分的计划可能只包含一个踢的行为。但AI离敌人很远的时候，只有踢一个行为的计划就只能拿到低分。如果我们在踢的前面插入一个跳跃，使得AI可以离敌人更近而攻击到敌人，那这个计划的可行性评分就高多了去了。无论当前全局状态怎么变化，只要有上述的信息和功能，planner就能够动态创建计划来达成比较高级的目标
   - 如上所述，planner擅长管理AI应该做什么，设计者可以用启发式方法来衡量全局状态，来给AI指定一个高级的目标，而不用设计特定情况下的特定行为。Planner通过严格区分AI的行为和目标来实现上述功能。这也使得AI在设计变化的情况下更加灵活和健壮。例如跳跃动作表现不好只能去掉，那就只需要移除这个行为，AI仍然会尽可能找到合理的计划。如果踢的行为现在可以发出冲击波，你只需要给踢这个行为的结果加上所需“描述”即可。改变行为，不应该还要改变AI应该做什么。
   - Planer有一个很大的问题，就是它可能创建出不实际的计划，例如连续飞踢27次。同时，设计者也想对AI拥有比较高的控制权
   - 行为树是一种完全需要设计但在极端情况下表现不好的AI方案，而planner是全自动的，但难以预测具体行为。AI设计者和程序员会经常遇到这样的权衡问题。不过这实际上不是二选一的问题。最好的解决方案往往在这两个极端方案之间

## 行为树和Planner混合方案
   - 混合方法的前提很简单，结合行为树和planner的优点，来使得AI系统在面对设计变化的时候灵活且健壮，同时设计者对AI可以执行的行为能够有全盘控制。和planner一样，混合方法使用一个全局状态模型和启发式方法。不同点在于，planner动态创建基本行为序列，用启发式方法（评估方法）来选择最佳计划，而混合方法使用评估方法，在预编辑的行为树分支间选择下一步行为序列
   - 具体来说，就是在行为树运行时加入一个评估的过程，执行启发式方法，对每个分支进行模拟执行，根据它们的执行结果评分，找到最佳分支
