---
layout:     post
title:      "Pathfinding Architecture Optimizations"
subtitle:   "GameAIPro Chapter17"
date:       2020-09-18  16:45:00
author:     "zhouhd"
header-img: "img/about-bg.jpg"
catalog: true
tags:
    - GameAI
    - GameAIPro
    - GameProgramming
---

## 优化1：构建高质量启发值计算
- 预计算每条路径：实践中消耗内存过多，可以通过分层减少内存需求，多个小节点组成更大的节点，预计算只发生在同层次同父节点的节点之间，一般采用Roy-Floyd-Warshall方法
- 无损或者有损压缩的预计算，例如可以压缩距离，两点之间的距离通过和其它点距离之差的最大值来估算

## 优化2：使用最合适的搜索空间表示方法
- 常用搜索空间表示方法有格子/路点/寻路网格
- 还可以构造多层空间，先用高级空间（节点少）获得路径，再用低级空间细化路径

## 优化3：预分配所需空间
- 减少运行时空间分配，不过这也可以通过底层的内存池来间接完成

## 优化4：适度高估启发值
- 适量高估启发值，可以让启发式搜索加快，倾向于先搜索那些近的节点，不过结果可能不是最优的

## 优化5：适当缓存
- 缓存搜索过的节点，保证不会重复搜索
- 缓存每个节点的邻接节点，减少获取消耗

## 坏主意：
- 同步搜索：如果寻路实现是同步的，那么过多的寻路请求会很容易占用大量CPU时间
- 缓存路径：如果只是简单地缓存，很容易占用大量内存，或者缓存失效，因为路径数量太多了