---
layout:     post
title:      "Choosing a Search Space Representation"
subtitle:   "GameAIPro Chapter18"
date:       2020-11-03  16:52:00
author:     "zhouhd"
header-img: "img/about-bg.jpg"
catalog: true
tags:
    - GameAI
    - GameAIPro
    - GameProgramming
---

## 格子
##### 优点
- 最简单易用的表示方法
- 普通的文本编辑器就可以进行编辑
- 易于进行动态运行时修改，例如格子能否通行或者通行消耗
- 确定某个坐标位于哪个格子简单

##### 缺点
- 占用内存空间多
- 一般需要路径平滑来减少拐角
- 寻路可能会非常耗时
- 格子地图经常包含很多对称路径，一般会增加寻路消耗，需要额外处理

## 路点
##### 优点
- 相对容易实现
- 如果修改是可预知的，运行时可以比较简单地进行修改，例如路点能否通行
- 数据少，内存占用小，寻路比较快

##### 缺点
- 如果可通行边不够多，路径质量会比较差。但可通行边多了，内存需求和寻路复杂度也会提高
- 路点需要手动编辑来保证质量
- 如果角色不是刚好在路点图上面，难以进行定位
- 路径平滑难以进行
- 非预期的动态修改基本不可能进行

## 寻路网格
##### 优点
- 精确表示可行走区域
- 容易准确进行移动前和移动时的路径平滑
- 得益于对可行区域的表示比较好，寻路通常很快
- 占用内存较少

##### 缺点
- 自行实现寻路网格库非常困难，不过有优秀的开源实现
- 和格子算法比起来，运行时修改非常难
- 如果实现不好，在寻路网格上定位消耗会很大。优秀实现通常使用额外数据结构例如格子来加速定位
