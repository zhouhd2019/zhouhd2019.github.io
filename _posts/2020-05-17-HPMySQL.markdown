---
layout:     post
title:      "High Performance MySQL"
subtitle:   ""
date:       2020-05-17 18:30:00
author:     "zhouhd"
header-img: "img/about-bg.jpg"
catalog: true
tags:
    - DataBase
    - MySQL
---

高性能MySQL摘要。由于工作中没有用到MySQL，所以主要以一些通用知识为主。

### MySQL架构与历史
- MySQL逻辑架构由3层组成：最上层是连接/线程处理，用于连接处理、授权认证等等；第二层是MySQL核心服务功能，包括查询缓存、解析器、优化器等等，所有跨存储引擎的功能都在这层实现，例如存储过程、触发器、视图等等；第三层是存储引擎，一般不会解析SQL，特殊情况包括InnoDB解析外键定义
- 表锁是MySQL中最基本的锁策略，也是开销最小的策略，锁定整张表，实现是读写锁
- 行锁只在存储引擎层实现，MySQL服务层没有实现
- A原子性，C一致性，I隔离性，D持久性
- 隔离级别：READ UNCOMMITTED，存在脏读；READ COMMITTED，不可重复读；REPEATABLE READ，存在幻行，两次查询结果数量不一样；SERIALIZABLE，强制事务串行执行
- 数据库系统实现了各种死锁检测和超时机制，InnoDB一般的解决死锁方法是回滚持有最少行级排它锁的事务
- MySQL默认使用自动提交模式，如果不是显式开始一个事务，每个查询都会被当做一个事务执行提交操作
- InnoDB的MVCC，通过每行记录后保存两个隐藏的列来实现，记录行的创建版本号和过期版本号。每开启一个新事务，都会递增版本号
- MVCC：SELECT，只查找符合提交的数据行，创建版本早于事务版本，且删除版本晚于事务版本；UPDATE，插入一行新记录，创建版本号为当前版本，同时设置老记录的删除版本为当前版本

### 创建高性能的索引
- 索引可以减少服务器需要扫描的数据量，减少排序，并将随机IO变为顺序IO
- B+Tree索引，适用于全键值、键值范围或键最左前缀查找
- 哈希索引，需要精确匹配索引所有列，InnoDB引擎有一个特殊功能叫做自适应哈希索引，当某些索引值被用得非常频繁，InnoDB会在内存中基于B+Tree索引之上创建一个哈希索引。也可以自己增加一列CRC，通过触发器自动计算，查询时手动指定CRC即可
- 前缀索引是指只使用字符串的一部分来创建索引，这样索引更小
- 聚簇索引不是一种索引类型，而是一种数据存储方式，数据行存放在索引的叶子页。好处在于使用主索引获取数据时IO少一些。缺点包括：插入时可能需要更多修改，会导致页分裂；二级索引不能直接指向数据行，需要指向主键值，需要多一次IO；大量的页分裂导致页被不规则填充，浪费空间
- 覆盖索引是指一个索引包含所有需要查询的字段的值，对于InnoDB，二级索引保存了行的主键值，如果能覆盖查询，则可以避免对主键索引的二次查询

### 查询性能优化
- 低效查询可能是程序检索了大量不需要的数据，也可能是服务器需要分析过多数据行。
- 重构查询有下面几种方式：一个复杂查询或者多个简单查询；切分一个查询为多次；分解关联查询，应用程序自行关联
- 查询执行过程：客户端发起一条查询；服务器检查查询缓存，命中则直接返回结果，否则继续；SQL解析和预处理，由优化器生成对应执行计划；根据执行计划，调用存储引擎API来执行查询，返回结果
- 查询优化分为静态和动态优化。静态对解析树进行分析和优化，完成一次后即使参数改变也可以使用。动态优化和查询的上下文有关，是运行时优化
